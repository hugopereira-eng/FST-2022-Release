#!/usr/bin/env python
PACKAGE = "lidar"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

passthrough = gen.add_group("passthrough")
passthrough.add("passthrough_filter_min_x", double_t, 0, 
		"min value of the lidar pointcloud's passthrough filter in the x axis", -5, -10, 2.0)
passthrough.add("passthrough_filter_max_x", double_t, 0, 
		"max value of the lidar pointcloud's passthrough filter in the x axis", 20.0, 0.0, 40.0)
passthrough.add("passthrough_filter_min_y", double_t, 0, 
		"min value of the lidar pointcloud's passthrough filter in the y axis", -12.0, -20.0, 0.5)
passthrough.add("passthrough_filter_max_y", double_t, 0, 
		"max value of the lidar pointcloud's passthrough filter in the y axis", 12.0, 0.0, 20.0)
passthrough.add("passthrough_filter_min_z", double_t, 0, 
		"min value of the lidar pointcloud's passthrough filter in the z axis", -20.0, -20.0, 0.5)
passthrough.add("passthrough_filter_max_z", double_t, 0, 
		"max value of the lidar pointcloud's passthrough filter in the z axis", 20, 0.0, 20.0)
passthrough.add("passthrough_filter_distance_filter", double_t, 0, 
		"max distance value of the lidar pointcloud's points", 1, 0.0, 5.0)

ransac = gen.add_group("ransac")
ransac.add("ransac_max_iterations", int_t, 0, 
		"number of maximum interations the ransac algorithm can complete.", 100, 0, 500)
ransac.add("ransac_distance_threshold", double_t, 0, 
		"maximum distance that ransac will consider for a certain point to be part of the found plane", 0.04, 0, 1)

euclidian_clustering = gen.add_group("cluster")
euclidian_clustering.add("cluster_tolerance", double_t, 0, 
		"maximum distance in for two points be considered part of the same cluster", 0.3, 0, 2)
euclidian_clustering.add("cluster_min_size", int_t, 0, 
		"minimum number of points that make a valid cluster", 5, 0, 1000)
euclidian_clustering.add("cluster_max_size", int_t, 0, 
		"maximum number of points that make a valid cluster", 400, 0, 10000)

cone_reconstruction = gen.add_group("reconstruction")
cone_reconstruction.add("reconstruction_cylinder_radius", double_t, 0, 
		"radius of the cylinder created around the cluster", 0.114, 0, 0.5)
cone_reconstruction.add("reconstruction_cylinder_height", double_t, 0, 
		"height of the cylinder counting from the centroid of the cluster", 0.1625, 0, 0.5)

cone_identification = gen.add_group("identification")
cone_identification.add("identification_vertical_resolution", double_t, 0, 
		"vertical resolution of the lidar in degrees - used in the expected number of points formula", 1.01, 0.53, 2.2)
cone_identification.add("identification_cylinder_radius", double_t, 0, 
		"radius of the cylinder created around the cluster", 0.1425, 0, 0.5)
cone_identification.add("identification_cylinder_height", double_t, 0, 
		"height of the cylinder counting from the centroid of the cluster", 0.2525, 0, 0.5)

exit(gen.generate(PACKAGE, "lidar_cone_detector", "Lidar"))
